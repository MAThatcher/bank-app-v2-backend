generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account_users {
  id          Int       @id @default(autoincrement())
  create_date DateTime? @default(now()) @db.Timestamp(6)
  update_date DateTime? @default(now()) @db.Timestamp(6)
  user_id     Int?
  account_id  Int?
  archived    Boolean?  @default(false)
  accounts    accounts? @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_accounts")
  users       users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users")
}

model accounts {
  id            Int             @id @default(autoincrement())
  name          String?         @default("Account") @db.VarChar(255)
  create_date   DateTime?       @default(now()) @db.Timestamp(6)
  update_date   DateTime?       @default(now()) @db.Timestamp(6)
  owner         Int
  balance       Decimal?        @default(0) @db.Decimal(13, 2)
  overdraft     Boolean?        @default(false)
  archived      Boolean?        @default(false)
  type          account_type?   @default(Checkings)
  account_users account_users[]
  users         users           @relation(fields: [owner], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users")
  tags          tags[]
  transactions  transactions[]
}

model notifications {
  id          Int       @id @default(autoincrement())
  message     String    @db.VarChar(1020)
  create_date DateTime? @default(now()) @db.Timestamp(6)
  update_date DateTime? @default(now()) @db.Timestamp(6)
  user_id     Int
  dismissed   Boolean?  @default(false)
  type        String?   @db.VarChar(1020)
  users       users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users")
}

model tokens {
  id          Int         @id @default(autoincrement())
  value       String      @db.VarChar(1028)
  type        token_type? @default(AccessToken)
  create_date DateTime?   @default(now()) @db.Timestamp(6)
  expire_date DateTime?   @default(now()) @db.Timestamp(6)
  user_id     Int
  valid       Boolean?    @default(false)
  users       users       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users")
}

model transactions {
  id          Int        @id @default(autoincrement())
  create_date DateTime?  @default(now()) @db.Timestamp(6)
  update_date DateTime?  @default(now()) @db.Timestamp(6)
  account_id  Int
  description String     @db.VarChar(1020)
  user_id     Int
  amount      Decimal    @db.Decimal(13, 2)
  archived    Boolean?   @default(false)
  category    String     @db.VarChar(1020)
  disputes    disputes[]
  tags        tags[]
  accounts    accounts   @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_accounts")
  users       users      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users")
}

model user_details {
  id             Int       @id @default(autoincrement())
  fname          String?   @db.VarChar(255)
  mname          String?   @db.VarChar(255)
  lname          String?   @db.VarChar(255)
  address_street String?   @db.VarChar(255)
  address_city   String?   @db.VarChar(255)
  address_state  String?   @db.Char(2)
  address_zip    Decimal?  @db.Decimal(5, 0)
  create_date    DateTime? @default(now()) @db.Timestamp(6)
  update_date    DateTime? @default(now()) @db.Timestamp(6)
  user_id        Int
  users          users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users")
}

model users {
  id              Int              @id @default(autoincrement())
  email           String?          @unique @db.VarChar(255)
  password        String           @db.VarChar(255)
  archived        Boolean?         @default(false)
  create_date     DateTime?        @default(now()) @db.Timestamp(6)
  update_date     DateTime?        @default(now()) @db.Timestamp(6)
  super_user      Boolean?         @default(false)
  archived_email  String?          @db.VarChar(255)
  verified        Boolean?         @default(false)
  account_users   account_users[]
  accounts        accounts[]
  audit_logs      audit_logs[]
  disputes        disputes[]
  notifications   notifications[]
  sessions        sessions[]
  tokens          tokens[]
  transactions    transactions[]
  two_factor_auth two_factor_auth?
  user_details    user_details[]
}

model audit_logs {
  id          Int       @id @default(autoincrement())
  action      String    @db.VarChar(255)
  create_date DateTime? @default(now()) @db.Timestamp(6)
  user_id     Int
  details     String?   @db.VarChar(2048)
  users       users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users")
}

model disputes {
  id             Int          @id @default(autoincrement())
  create_date    DateTime?    @default(now()) @db.Timestamp(6)
  update_date    DateTime?    @default(now()) @db.Timestamp(6)
  user_id        Int
  transaction_id Int
  status         String?      @default("Open") @db.VarChar(255)
  reason         String       @db.VarChar(1020)
  details        String?      @db.VarChar(2048)
  resolution     String?      @db.VarChar(2048)
  transactions   transactions @relation(fields: [transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_transactions")
  users          users        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users")
}

model sessions {
  id          Int       @id @default(autoincrement())
  create_date DateTime? @default(now()) @db.Timestamp(6)
  update_date DateTime? @default(now()) @db.Timestamp(6)
  user_id     Int
  ip_address  String    @db.VarChar(45)
  user_agent  String?   @db.VarChar(512)
  valid       Boolean?  @default(true)
  users       users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users")
}

model tags {
  id             Int           @id @default(autoincrement())
  create_date    DateTime?     @default(now()) @db.Timestamp(6)
  update_date    DateTime?     @default(now()) @db.Timestamp(6)
  archived       Boolean?      @default(false)
  tag            String?       @db.VarChar(128)
  transaction_id Int?
  account_id     Int?
  accounts       accounts?     @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_accounts")
  transactions   transactions? @relation(fields: [transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users")
}

model two_factor_auth {
  id          Int       @id @default(autoincrement())
  user_id     Int       @unique
  secret      String    @db.VarChar(255)
  enabled     Boolean?  @default(false)
  create_date DateTime? @default(now()) @db.Timestamp(6)
  update_date DateTime? @default(now()) @db.Timestamp(6)
  users       users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users")
}

enum account_type {
  Checkings
  Savings
}

enum token_type {
  AccessToken
  RefreshToken
}
